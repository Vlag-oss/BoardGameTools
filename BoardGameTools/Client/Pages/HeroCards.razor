@using BoardGameTools.Client.Models
@using BoardGameTools.Client.ViewModels.Interfaces

<WarningAlert WarningMessage="@CardViewModel.WarningMessage"></WarningAlert>
<div class="mt-3">
    @if (CardViewModel.SelectedCards.Any())
    {
        <p>
            <b> Cartes sélectionnées </b><br/>
            @foreach (var selectedCard in CardViewModel.SelectedCards)
            {
                <div class="mt-2">
                    <span>@selectedCard.Name</span><button @onclick="(() => CardViewModel.RemoveCard(selectedCard))" type="button" class="btn-close" aria-label="Close"></button><br/>
                </div>
            }
        </p>
    }

    <div class="form-group">
        <input class="form-control" type="text" placeholder="Search cards..." @bind="FilterCard" @bind:event="oninput"/>
    </div>
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th scope="col">#</th>
            <th scope="col">Nom</th>
            <th scope="col">Caractéristique</th>
            <th scope="col">Valeur</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var card in Cards)
        {
            if (!IsVisibleCard(card))
                continue;
            <tr>
                <td><button @onclick="() => CardViewModel.AddCard(card)" disabled=@card.Disabled class="btn btn-success">Add</button></td>
                <td>@card.Id</td>
                <td>@card.Name</td>
                <td>
                    <table>
                        <tbody>
                        @foreach (var characteristic in @card.Characteristics)
                        {
                            <tr>
                                <td>@characteristic</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </td>
                <td>
                    <table>
                        <tbody>
                        @foreach (var value in @card.Values)
                        {
                            <tr>
                                <td>@value</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public IHeroesViewModel CardViewModel { get; set; }
    [Parameter]
    public List<CardModel> Cards { get; set; }

    public string FilterCard { get; set; } = string.Empty;

    public bool IsVisibleCard(CardModel card)
    {
        if (string.IsNullOrEmpty(FilterCard))
            return true;

        if (card.Name.Contains(FilterCard, StringComparison.OrdinalIgnoreCase))
            return true;

        var filter = false;

        card.Characteristics.ForEach(charac => {
            if (charac.Contains(FilterCard, StringComparison.OrdinalIgnoreCase))
                filter = true;
        });

        if(filter)
            return true;

        return false;
    }
}
