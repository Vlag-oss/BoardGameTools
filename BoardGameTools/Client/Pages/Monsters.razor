@using BoardGameTools.Client.ViewModels
@using BoardGameTools.Shared.Models
@inject IMonsterViewModel monsterViewModel

<WarningAlert WarningMessage="@monsterViewModel.WarningMessage"></WarningAlert>

<div class="mt-3">
    @if (monsterViewModel.SelectedMonster.Any())
    {
        <p>
            <b> monstre sélectionné </b><br/>
            @foreach(var monster in monsterViewModel.SelectedMonster)
            {
                <div class="mt-2">
                    <span>@monster.Name</span><button @onclick="(() => monsterViewModel.RemoveMonster(monster))" type="button" class="btn-close" aria-label="Close"></button><br/>
                </div>
            }
        </p>
    }

    <div class="form-group">
        <input class="form-control" type="text" placeholder="Search monsters..." @bind="Filter" @bind:event="oninput" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th scope="col">#</th>
                <th scope="col">Nom</th>
                <th scope="col">Attaque</th>
                <th scope="col">Armure</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var monster in monsters)
            {
                if (!IsVisibleMonster(monster))
                    continue;
                <tr>
                    <td><button @onclick="(() => monsterViewModel.AddMonster(monster))" class="btn btn-success">Add</button></td>
                    <td>@monster.Id</td>
                    <td>@monster.Name</td>
                    <td>@monster.Attack</td>
                    <td>@monster.Armor</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<Monster> monsters = new();

    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync() => monsters = await monsterViewModel.GetMonster();

    public bool IsVisibleMonster(Monster monster)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (monster.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
