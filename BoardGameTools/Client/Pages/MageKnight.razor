@page "/"
@page "/mageknight"
@using BoardGameTools.Client.ViewModels.Interfaces
@using BoardGameTools.Shared.Models
@using BoardGameTools.Client.Models
@inject IHeroesViewModel CardViewModel
@inject IMonsterViewModel MonsterViewModel
@inject IFightViewModel FightViewModel
@inject NavigationManager NavigationManager

<h1>Mage Knight</h1>
<hr/>

<p>
    <b>Partie 1</b><br/>
    <i>
        Dans ce paragraphe on retrouvera des règles rapides et globales permettant de rejouer au jeu sans se repancher dans le livret <br/>
        Dans une future version l'utilisateur pourra se créer un compte et modifier s'il le souhaite cette partie de règle en mettant ce qui l'intéresse le plus.
    </i>
</p>

<p>
    <b>Partie 2</b><br/>
    <i>Le test classique permet de savoir si oui ou non les cartes en main peuvent tuer le monstre</i><br/>
    <i>Le test avancé permet de savoir si les cartes en main peuvent tuer le monstre et avec la composition la plus optimal</i><br/><br/>

    <button class="btn btn-primary" @onclick="TestFight">Test</button> 
    <button class="btn btn-primary" disabled>Test avancé</button>

    <div class="row mt-2">

        <div class="alert alert-success alert-dismissible fade show @_hiddenAlertSuccess" role="alert">
            <div class="mt-5">
                <h4>Bien joué !</h4>
                <span>Vous pouvez battre le monstre avec les cartes suivantes :</span><br/><br/>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAlertSuccess"></button>
                <ul>
                    @foreach (var cardUsed in _fightModel.CardsUsed)
                    {
                        <li style="background: #d1e7dd;">@cardUsed.Name</li>
                    }
                </ul>
            </div>
        </div>

        <div class="alert alert-danger alert-dismissible fade show @_hiddenAlertDanger" role="alert">
            <div class="mt-5">
                <h4>Dommage !</h4>
                <span>Vous ne pouvez pas battre le monstre avec vos cartes</span><br/><br/>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAlertDanger"></button>
            </div>
        </div>

        <div class="col-7">
            <HeroCards CardViewModel="@CardViewModel" Cards="@_cards"></HeroCards>
        </div>
        <div class="col-1"></div>
        <div class="col-4">
            <MonsterCards MonsterViewModel="@MonsterViewModel" Monsters="@_monsters"></MonsterCards>
        </div>
    </div>
</p>

@code{

    private List<CardModel> _cards = new();

    private List<Monster> _monsters = new();

    protected override async Task OnInitializedAsync() 
    {
        _cards = await CardViewModel.GetCard();
        _monsters = await MonsterViewModel.GetMonster();
    }

    private FightModel _fightModel = new();
    private string _hiddenAlertSuccess = "d-none";
    private string _hiddenAlertDanger = "d-none";

    public async Task TestFight()
    {
        _fightModel = await FightViewModel.Fight(CardViewModel.SelectedCards, MonsterViewModel.SelectedMonster);
        if (_fightModel.Result)
            _hiddenAlertSuccess = string.Empty;
        else
            _hiddenAlertDanger = string.Empty;
    }

    private void CloseAlertSuccess()
    {
        _hiddenAlertSuccess = "d-none";
    }

    public void CloseAlertDanger()
    {
        _hiddenAlertDanger = "d-none";
    }
}